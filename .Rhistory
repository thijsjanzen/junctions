phased = FALSE,
t = 600)
testthat::expect_gte(ll_30, ll_100)
t2 <- Sys.time()
cat(2, difftime(t2, t1)[[1]], "\n")
multi_ll <- log_likelihood_diploid(cbind(1,
local_data$location,
local_data$anc_chrom_1,
local_data$anc_chrom_2),
pop_size = 1000,
freq_ancestor_1 = 0.1,
phased = FALSE,
t = c(3, 30000))
testthat::expect_true(length(multi_ll) == 2)
testthat::expect_gt(multi_ll[1], multi_ll[2])
t3 <- Sys.time()
cat(3, difftime(t3, t2)[[1]], "\n")
population_size <- 100
max_t <- 10
vx <- sim_phased_unphased(pop_size = population_size,
freq_ancestor_1 = 0.5,
total_runtime = max_t,
size_in_morgan = 1,
markers = 1000,
time_points = -1)
sim_t <- unique(vx$time)
testthat::expect_equal(length(sim_t), max_t + 1)  # [0, 1, ..., max_t]
t4 <- Sys.time()
cat(difftime(t4, t3)[[1]], "\n")
testthat::expect_warning(
vx <- sim_phased_unphased(pop_size = population_size,
freq_ancestor_1 = 0.5,
total_runtime = max_t,
size_in_morgan = 1,
markers = 1000,
time_points = max_t + 5)
)
testthat::expect_equal(length(unique(vx$time)), 1)
t5 <- Sys.time()
cat(4, difftime(t5, t4)[[1]], "\n")
population_size <- 100
max_t <- 110
vx <- sim_phased_unphased(pop_size = population_size,
freq_ancestor_1 = 0.5,
total_runtime = max_t,
size_in_morgan = 1,
markers = 1000,
time_points = c(50, 100))
local_data <- subset(vx, vx$individual == 0 &
vx$time == 100)
testthat::expect_error(
ll_100 <- log_likelihood_diploid(cbind(1,
local_data$location,
local_data$anc_chrom_1,
local_data$anc_chrom_2),
pop_size = 1,
freq_ancestor_1 = 0.5,
t = 100,
phased = FALSE),
"pop_size < 2"
)
testthat::expect_error(
ll_100 <- log_likelihood_diploid(cbind(1,
local_data$location,
local_data$anc_chrom_1,
local_data$anc_chrom_2),
pop_size = population_size,
freq_ancestor_1 = 0.0,
t = 100,
phased = FALSE),
"p <= 0"
)
testthat::expect_error(
ll_100 <- log_likelihood_diploid(cbind(1,
local_data$location,
local_data$anc_chrom_1,
local_data$anc_chrom_2),
pop_size = population_size,
freq_ancestor_1 = 1.0,
t = 100,
phased = FALSE),
"p >= 1"
)
testthat::expect_error(
ll_100 <- log_likelihood_diploid(cbind(1,
local_data$location,
local_data$anc_chrom_1,
local_data$anc_chrom_2),
pop_size = population_size,
freq_ancestor_1 = 0.5,
t = 0,
phased = FALSE),
"t < 1"
)
t6 <- Sys.time()
cat(5, difftime(t6, t5)[[1]], "\n")
N <- 10000 # nolint
R <- 10000 # nolint
t <- 10
H_0 <- 0.5 # nolint
C <- 1     # nolint
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 100,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
vx <- vx$results
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
t7 <- Sys.time()
cat(6, difftime(t7, t6)[[1]], "\n")
N <- 10000 # nolint
R <- 10000 # nolint
t <- 20
H_0 <- 0.5 # nolint
C <- 1    # nolint
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 30)
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
t8 <- Sys.time()
cat(7, difftime(t8, t7)[[1]], "\n")
}
do_test()
N <- 10000 # nolint
R <- 10000 # nolint
t <- 10
H_0 <- 0.5 # nolint
C <- 1     # nolint
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 100,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
num_j_true
N <- 10000 # nolint
R <- 10000 # nolint
t <- 10
H_0 <- 0.5 # nolint
C <- 1     # nolint
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 10,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
vx <- vx$results
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 100,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
vx <- vx$results
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
obs_j
exp_j
vx
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 100,
record_true_junctions = TRUE,
verbose = FALSE)
)
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 100,
record_true_junctions = TRUE,
verbose = TRUE)
N <- 10000 # nolint
R <- 10000 # nolint
t <- 4
H_0 <- 0.5 # nolint
C <- 1     # nolint
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 100,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
vx <- vx$results
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
obs_j
exp_j
N <- 10000 # nolint
R <- 10000 # nolint
t <- 4
H_0 <- 0.5 # nolint
C <- 1     # nolint
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 10,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
vx <- vx$results
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
obs_j
exp_j
N <- 10000 # nolint
R <- 10000 # nolint
t <- 4
H_0 <- 0.5 # nolint
C <- 1     # nolint
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 100,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
vx <- vx$results
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
N <- 10000 # nolint
R <- 10000 # nolint
t <- 20
H_0 <- 0.5 # nolint
C <- 1    # nolint
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 30)
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
N <- 10000 # nolint
R <- 10000 # nolint
t <- 4
H_0 <- 0.5 # nolint
C <- 1     # nolint
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 30,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
vx <- vx$results
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
N <- 10000 # nolint
R <- 10000 # nolint
t <- 20
H_0 <- 0.5 # nolint
C <- 1    # nolint
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 30)
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
N <- 10000 # nolint
R <- 10000 # nolint
t <- 10
H_0 <- 0.5 # nolint
C <- 1     # nolint
testthat::expect_output(
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 30,
record_true_junctions = TRUE,
verbose = TRUE)
)
num_j_true <- mean(c(vx$true_results$junctions_chrom_1,
vx$true_results$junctions_chrom_2))
vx <- vx$results
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
N <- 10000 # nolint
R <- 10000 # nolint
t <- 20
H_0 <- 0.5 # nolint
C <- 1    # nolint
vx <- sim_phased_unphased(pop_size = N,
freq_ancestor_1 = H_0,
total_runtime = t,
size_in_morgan = C,
markers = R,
time_points = t,
num_indiv_sampled = 30)
num_j <- c()
for (i in unique(vx$individual)) {
dd <- subset(vx, vx$individual == i)
num_j_1 <- sum(abs(diff(dd$anc_chrom_1)))
num_j_2 <- sum(abs(diff(dd$anc_chrom_1)))
num_j <- c(num_j, c(num_j_1, num_j_2))
}
obs_j <- mean(num_j)
exp_j <- junctions::number_of_junctions(N = N,
R = R,
H_0 = H_0,
C = C,
t = t)
testthat::expect_equal(obs_j, exp_j, tolerance = 0.2)
devtools::build()
