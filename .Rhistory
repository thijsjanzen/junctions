pop_size = 1000,
total_runtime = 100)
require(GenomeAdmixR)
ax <- GenomeAdmixR::simulate_admixture(module = ancestry_module(),
pop_size = 1000,
total_runtime = 100)
ax
ay <- GenomeAdmixR::calculate_heterozygosity(ax$population)
ay <- GenomeAdmixR::calculate_heterozygosity(ax$population,
locations = seq(0, 1, length.out = 100))
ay
?ancestry_module
ax <- GenomeAdmixR::simulate_admixture(module = ancestry_module(),
pop_size = 1000,
total_runtime = 1)
ay <- GenomeAdmixR::calculate_heterozygosity(ax$population,
locations = seq(0, 1, length.out = 100))
ay
ax <- GenomeAdmixR::simulate_admixture(module = ancestry_module(),
pop_size = 1000,
total_runtime = 0)
ay <- GenomeAdmixR::calculate_heterozygosity(ax$population,
locations = seq(0, 1, length.out = 100))
ay
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line()
ax <- junctions::sim_phased_unphased(pop_size = 1000000,
markers = 10000,
total_runtime = 10,
freq_ancestor_1 = -0.5,
num_indiv_sampled = 100,
num_threads = 4)
found <- c()
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
cat(to_add, "\n")
found <- rbind(found, to_add)
}
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 1000000,
markers = 10000,
total_runtime = 20,
freq_ancestor_1 = -0.5,
num_indiv_sampled = 1000,
num_threads = 6,
verbose = TRUE)
found <- c()
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
t <- 0:20
p_i <- 0.5
H_obs <- c()
for (t in 1:20) {
sum_term <- 0
for (i in 1:t) {
sum_term <- sum_term + p_i * p_i
}
H_obs[t] <- 1 - sum_term
}
H_obs
t <- 0:20
p_i <- 0.5
N <- 1e6
H_obs <- H_0 * (1 - 1/(2*N))^t
H_0 <- 1
H_obs <- H_0 * (1 - 1/(2*N))^t
H_obs
ax <- junctions::sim_phased_unphased(pop_size = 10000,
markers = 1000,
total_runtime = 10,
freq_ancestor_1 = -0.5,
num_indiv_sampled = 1000,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 100,
markers = 1000,
total_runtime = 10,
freq_ancestor_1 = -0.5,
num_indiv_sampled = 50,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 100,
markers = 1000,
total_runtime = 100,
freq_ancestor_1 = -0.5,
num_indiv_sampled = 50,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 100,
markers = 1000,
total_runtime = 1000,
freq_ancestor_1 = -0.5,
num_indiv_sampled = 10,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
ax <- junctions::sim_phased_unphased(pop_size = 10000,
markers = 1000,
total_runtime = 1000,
freq_ancestor_1 = 0.5,
num_indiv_sampled = 10,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
ax <- junctions::sim_phased_unphased(pop_size = 10000,
markers = 1000,
total_runtime = 100,
freq_ancestor_1 = 0.5,
num_indiv_sampled = 10,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 10000,
markers = 1000,
total_runtime = 100,
freq_ancestor_1 = 0.5,
num_indiv_sampled = 100,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 10000,
markers = 1000,
total_runtime = 100,
freq_ancestor_1 = 0.9,
num_indiv_sampled = 100,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
p <- c(0.5, 0.6, 0.7, 0.8, 0.9)
2 * p * (1 - p)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 10000,
markers = 1000,
total_runtime = 100,
freq_ancestor_1 = 0.5,
num_indiv_sampled = 100,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
found %>%
group_by(t) %>%
summarise("mean_het" = mean(heterozygosity)) %>%
ggplot(aes(x = t, y = mean_het)) +
geom_line() +
geom_point()
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 100000,
markers = 1000,
total_runtime = 100,
freq_ancestor_1 = 0.5,
num_indiv_sampled = 10,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
ax <- junctions::sim_phased_unphased(pop_size = 100000,
markers = 10000,
total_runtime = 20,
freq_ancestor_1 = 0.5,
num_indiv_sampled = 10,
num_threads = 6,
verbose = TRUE)
found <- c()
pb <- txtProgressBar(max = length(unique(ax$time)), style = 3)
cnt <- 1
for (t in unique(ax$time)) {
a <- subset(ax, ax$time == t)
for (indiv in unique(a$individual)) {
b <- subset(a, a$individual == indiv)
geno <- rep(0, length(b$time))
geno[b$anc_chrom_1 != b$anc_chrom_2] <- 1
distances <- diff(b$location)
total_het <- sum(distances * geno[2:length(geno)])
to_add <- c(t, indiv, total_het)
#   cat(to_add, "\n")
found <- rbind(found, to_add)
}
cnt <- cnt + 1
setTxtProgressBar(pb, cnt)
}
require(tidyverse)
colnames(found) <- c("t", "indiv", "heterozygosity")
found <- as_tibble(found)
ggplot(found, aes(x = t, y = heterozygosity)) +
geom_point()
library(junctions)
population_size <- 100
max_t <- 110
vx <- sim_phased_unphased(pop_size = population_size,
freq_ancestor_1 = 0.5,
total_runtime = max_t,
size_in_morgan = 1,
markers = 1000,
time_points = c(50, 100))
local_data <- subset(vx, vx$individual == 0 &
vx$time == 100)
library(junctions)
population_size <- 100
max_t <- 110
vx <- sim_phased_unphased(pop_size = population_size,
freq_ancestor_1 = 0.5,
total_runtime = max_t,
size_in_morgan = 1,
markers = 1000,
time_points = c(50, 100))
local_data <- subset(vx, vx$individual == 0 &
vx$time == 100)
cbind(1,
sample(local_data$location,
length(local_data$location)),
local_data$anc_chrom_1,
local_data$anc_chrom_2)
devtools::build()
